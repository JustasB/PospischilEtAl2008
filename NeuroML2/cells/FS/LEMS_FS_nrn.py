'''
Neuron simulator export for:

Components:
    null (Type: notes)
    Kd_CML (Type: ionChannelHH:  conductance=0.0 (SI conductance))
    null (Type: notes)
    Km_CML (Type: ionChannelHH:  conductance=0.0 (SI conductance))
    null (Type: notes)
    LeakConductance (Type: ionChannelPassive:  conductance=0.0 (SI conductance))
    null (Type: notes)
    Na_CML (Type: ionChannelHH:  conductance=0.0 (SI conductance))
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    FS_ModelDB (Type: cell)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    Input_1 (Type: pulseGenerator:  delay=0.3 (SI time) duration=0.41 (SI time) amplitude=5.0E-10 (SI current))
    network_PospischilEtAl2008 (Type: networkWithTemperature:  temperature=309.15 (SI temperature))
    sim1 (Type: Simulation:  length=1.0 (SI time) step=1.0E-5 (SI time))


    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.4.2
         org.neuroml.model   v1.4.2
         jLEMS               v0.9.7.3

'''

import neuron
h = neuron.h
h.load_file("stdlib.hoc")

h.load_file("stdgui.hoc")

h("objref p")
h("p = new PythonObject()")

# Adding simulation Component(id=sim1 type=Simulation) of network/component: network_PospischilEtAl2008 (Type: networkWithTemperature:  temperature=309.15 (SI temperature))

# Temperature used for network: 309.15 K
h.celsius = 309.15 - 273.15

print("Population CG_FS_ModelDB contains 1 instance(s) of component: FS_ModelDB of type: cell")

h.load_file("FS_ModelDB.hoc")
a_CG_FS_ModelDB = []
h("n_CG_FS_ModelDB = 1")
h("objectvar a_CG_FS_ModelDB[n_CG_FS_ModelDB]")
for i in range(int(h.n_CG_FS_ModelDB)):
    h("a_CG_FS_ModelDB[%i] = new FS_ModelDB()"%i)
    h("access a_CG_FS_ModelDB[%i].Soma"%i)

h("a_CG_FS_ModelDB[0].position(361.80304, 513.20953, 932.99347)")

h("proc initialiseV_CG_FS_ModelDB() { for i = 0, n_CG_FS_ModelDB-1 { a_CG_FS_ModelDB[i].set_initial_v() } }")
h("objref fih_CG_FS_ModelDB")
h('{fih_CG_FS_ModelDB = new FInitializeHandler(0, "initialiseV_CG_FS_ModelDB()")}')

h("proc initialiseIons_CG_FS_ModelDB() { for i = 0, n_CG_FS_ModelDB-1 { a_CG_FS_ModelDB[i].set_initial_ion_properties() } }")
h("objref fih_ion_CG_FS_ModelDB")
h('{fih_ion_CG_FS_ModelDB = new FInitializeHandler(1, "initialiseIons_CG_FS_ModelDB()")}')

# Adding input: Component(id=0 type=input)

h("objectvar Input_1_0")
h("a_CG_FS_ModelDB[0].Soma { Input_1_0 = new Input_1(0.500000) } ")

trec = h.Vector()
trec.record(h._ref_t)

h.tstop = 1000.0

h.dt = 0.01

h.steps_per_ms = 100.0



# File to save: CG_FS_ModelDB_v_0_0_OF
# Column: CG_FS_ModelDB/0/FS_ModelDB/v
h(' objectvar v_v_CG_FS_ModelDB_v_0_0_OF ')
h(' { v_v_CG_FS_ModelDB_v_0_0_OF = new Vector() } ')
h(' v_v_CG_FS_ModelDB_v_0_0_OF.record(&a_CG_FS_ModelDB[0].Soma.v(0.5)) ')
h.v_v_CG_FS_ModelDB_v_0_0_OF.resize((h.tstop * h.steps_per_ms) + 1)

# File to save: time
# Column: time
h(' objectvar v_time ')
h(' { v_time = new Vector() } ')
h(' v_time.record(&t) ')
h.v_time.resize((h.tstop * h.steps_per_ms) + 1)



print("Running a simulation of %sms (dt = %sms)" % (h.tstop, h.dt))

h.run()

print("Finished simulation, saving results...")


# File to save: CG_FS_ModelDB_v_0_0_OF
f_CG_FS_ModelDB_v_0_0_OF_f2 = open('FS.dat', 'w')
for i in range(int(h.tstop * h.steps_per_ms) + 1):
    f_CG_FS_ModelDB_v_0_0_OF_f2.write('%f\t'% (float(h.v_time.get(i))/1000.0)) # Time in first column, save in SI units...
    f_CG_FS_ModelDB_v_0_0_OF_f2.write('%f\t'%(float(h.v_v_CG_FS_ModelDB_v_0_0_OF.get(i)) / 1000.0)) # Saving as SI, variable has dim: voltage
    f_CG_FS_ModelDB_v_0_0_OF_f2.write("\n")
f_CG_FS_ModelDB_v_0_0_OF_f2.close()
print("Saved data to: FS.dat")

# File to save: time
f_time_f2 = open('time.dat', 'w')
for i in range(int(h.tstop * h.steps_per_ms) + 1):
    f_time_f2.write('%f'% (float(h.v_time.get(i))/1000.0))  # Save in SI units...
    f_time_f2.write("\n")
f_time_f2.close()
print("Saved data to: time.dat")

print("Done")

quit()
